generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       Int      @id @default(autoincrement()) @map("_id")
  email    String   @unique
  avatar   String?
  username String?
  name     String?
  subtitle String?
  bio      String?
  
  following  Follower[] @relation("FollowingProfile")
  followedBy Follower[] @relation("FollowedProfile")
}

model Post {
  id              Int   @id @default(autoincrement()) @map("_id")
  author          Int
  image           String
  description     String
  likesCount      Int      @default(0)
  dislikesCount   Int      @default(0)
  vtffCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  comments    Comment[]
  likes       Like[]
  dislikes    Dislike[]
  vtffs       Vtff[]
  bookmarks   Bookmark[]
}

model Comment {
  id        Int      @id @default(autoincrement()) @map("_id")
  postId    Int
  author    String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation(fields: [postId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement()) @map("_id")
  postId    Int
  author    Int
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id])
}

model Dislike {
  id        Int      @id @default(autoincrement()) @map("_id")
  postId    Int
  author    Int
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id])
}

model Vtff {
  id        Int      @id @default(autoincrement()) @map("_id")
  postId    Int
  author    Int
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id])
}

model Bookmark {
  id        Int      @id @default(autoincrement()) @map("_id")
  postId    Int
  author    Int
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id])
}

model Follower {
  id                    Int      @id @default(autoincrement()) @map("_id")
  followingProfileEmail String
  followingProfileId    Int
  followedProfileId     Int
  createdAt             DateTime @default(now())

  followingProfile      Profile  @relation("FollowingProfile", fields: [followingProfileId], references: [id])
  followedProfile       Profile  @relation("FollowedProfile", fields: [followedProfileId], references: [id])
}
